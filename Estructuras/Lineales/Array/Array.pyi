from typing import TypeVar, Generic, overload
T = TypeVar("T")

class Array(Generic[T]):
    @overload
    def __init__(self, size: int) -> None:...
    @overload
    def __init__(self, value1: T, *values: T) -> None:...
    def get(self, index: int) -> T:...
    def set(self, index: int, value: T) -> None:...
    def __getitem__(self, index: int) -> T:...
    def __setitem__(self, index: int, value: T) -> None:...
    def __len__(self) -> int:...
    def __iter__(self) -> ArrayIter:...

class ArrayIter(Generic[T]):
    def __init__(self, array: Array) -> None:...
    def __iter__(self) -> ArrayIter:...
    def __next__(self) -> T:...